<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | begin..rescue]]></title>
  <link href="http://rudywseidinger.github.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://rudywseidinger.github.com/"/>
  <updated>2013-08-06T15:33:43-03:00</updated>
  <id>http://rudywseidinger.github.com/</id>
  <author>
    <name><![CDATA[Rudy Seidinger Jr]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sobrevivendo ao mundo GIT - 1]]></title>
    <link href="http://rudywseidinger.github.com/blog/2012/08/29/git-a-few-tips-to-survive-in-the-git-world/"/>
    <updated>2012-08-29T20:10:00-03:00</updated>
    <id>http://rudywseidinger.github.com/blog/2012/08/29/git-a-few-tips-to-survive-in-the-git-world</id>
    <content type="html"><![CDATA[<p>Algumas vezes no processo diário de desenvolvimento e versionamento dos nossos fontes, nos vemos em situações nas quais temos que lidar com o GIT para realizar algumas tarefas não tanto usuais.</p>

<p>Neste post e alguns no futuro, pretendo mostrar como procedo em alguns destes casos:</p>

<h3>Puts... Errei a mensagem de commit! Como faço para trocá-la?</h3>


<p>Tranquilo!</p>

<p>Se o seu commit foi o último realizado no branch local, simplesmente use:</p>

<p><code>
git commit --amend -m "nova mensagem"
</code></p>

<p>Se quer trocar a mensagem de outros commits, use:
(assumindo que você possui um editor padrão configurado no ~/.gitconfig)
<code>
git reabase -i SHA_DO_COMMIT_ANTERIOR_AO_QUE_SE_DESEJA_EDITAR_A_MENSAGEM
</code>
O "-i" acima representa o modo interativo, onde o GIT permite controle manual sob o processo de rebase (em breve tentarei postar algo mais profundo sobre o rebase).</p>

<p>Bom, após executar o comando, será exibida uma tela como esta, onde será possível, dentre outras coisas, trocar a mensagem do commit desejado:</p>

<p>```
pick f318e91 Implementando filtro anual
pick 582a73e Implementando componente de filtro de intervalo de datas</p>

<h1>Rebase a9fda57..582a73e onto a9fda57</h1>

<p>#</p>

<h1>Commands:</h1>

<h1>p, pick = use commit</h1>

<h1>r, reword = use commit, but edit the commit message</h1>

<h1>e, edit = use commit, but stop for amending</h1>

<h1>s, squash = use commit, but meld into previous commit</h1>

<h1>f, fixup = like "squash", but discard this commit's log message</h1>

<p>```
Basta modificar a opção <strong>pick</strong> por <strong>reword</strong> ou <strong>r</strong> para cada commit que se deseja editar a mensagem, salvar o arquivo e fechar o editor.</p>

<p>Feito isso, será aberto um arquivo para cada commit apontado anteriormente com o comando 'reword', exibindo a tela para edição no formato abaixo (supondo que selecionei o comando para 'reword' do primeiro commit acima):
```
Implementando componente de filtro de intervalo de datas</p>

<h1>Please enter the commit message for your changes. Lines starting</h1>

<h1>with '#' will be ignored, and an empty message aborts the commit.</h1>

<h1>Not currently on any branch.</h1>

<h1>Changes to be committed:</h1>

<h1>(use "git reset HEAD<sup>1</sup> <file>..." to unstage)</h1>

<p>#
```
Aí, basta editar a mensagem, salvar novamente e sair e as alterações serão aplicadas em nível de branch local.</p>
]]></content>
  </entry>
  
</feed>
